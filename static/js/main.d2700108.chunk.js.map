{"version":3,"sources":["TodoItem.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","TodoItemWrapper","div","TodoTitle","h1","TodoHeader","TodoFilter","FilterButton","TodoContents","TodoContent","TodoContentText","props","$isDone","TodoFooter","InputButton","StateButton","ReButton","DeleteAllButton","Todo","todo","handleDeleteTodo","handleToggleClick","handleEditTodo","handleOnblur","id","isDone","defaultValue","content","onChange","onBlur","onClick","TodoItem","useState","todos","setTodos","value","setValue","filters","setFilter","edit","setEdit","useRef","map","filter","trim","e","target","todoList","type","placeholder","current","console","log","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","theme","colors","primary_300","primary_400","primary_500","document","getElementById"],"mappings":"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","file":"static/js/main.d2700108.chunk.js","sourcesContent":["// import './App.css';\nimport styled from 'styled-components'\n// import { MEDIA_QUERY_MD, MEDIA_QUERY_LG } from './constants/breakpoint'\nimport { useState, useRef } from 'react'\n\n// 按鈕\nconst Button = styled.button`\n  &:hover {\n    background-color: #b3cccc;\n    box-shadow: 1.4px 1.4px 4px 0 #b3cccc;\n  }\n\n  & + & {\n    margin-left: 12px;\n  }\n\n  width: 100px;\n  padding: 10px 20px;\n  font-size: 1rem;    \n  border-radius: 3px;\n  cursor: pointer;            /* 點擊效果 */\n  transition: transform 0.2s;\n  border: aliceblue;\n`\n\nconst TodoItemWrapper = styled.div`\n  max-width: 550px;\n  border: solid 1px #75ccb9;\n  margin: 50px auto;\n  padding: 30px 4rem;\n  background-color: #fff475;\n  border-radius: 5px;\n  box-shadow: -1.4px -1.4px 4px 0 #d8eaef;\n  border: solid 1px #c7e5ec;\n  & input {\n    flex: 1;\n    padding: 20px;\n    border: 1px solid transparent;\n    transition: border 300ms ease 0s;\n    outline: none;\n    height: 0rem;\n  }\n`\n\nconst TodoTitle = styled.h1`\n  text-align: center;\n  font-weight: normal;\n  font-size: 1.9rem;\n`\n\nconst TodoHeader = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px;\n`\n\n// const TodoHeaderInput = styled.input`\n//   flex: 1;\n//   padding: 20px;\n//   border: 1px solid transparent;\n//   transition: border 300ms ease 0s;\n//   outline: none;\n//   height: 0rem;\n// `\n\nconst TodoFilter = styled.div`\n  display: flex;\n  padding: 12px;\n  margin-bottom: 1.5rem;\n\n  &  button {\n    width: 100%;\n    padding: 10px 20px;\n    font-size: 1rem;    \n    border-radius: 3px;\n    cursor: pointer;            /* 點擊效果 */\n    transition: transform 0.2s;\n    border: aliceblue;\n    background-color: #e5ffff;\n  }\n`\n\nconst FilterButton = styled(Button)`\n`\n\nconst TodoContents = styled.div`\n  justify-content: center;\n`\nconst TodoContent = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px;\n  margin-bottom: 3px;\n\n  &:hover {\n    background: rgba(216, 210, 141, 0.5);\n  }\n`\n\nconst TodoContentText = styled.div`\n  flex: 1;\n\n  & input {background-color: transparent;}\n\n  ${props => props.$isDone && `\n    & input {text-decoration: line-through;}\n  `}\n`\n// 嘗試將編輯改成這樣，失敗\n// const TodoContentTextInput = styled.input`\n//   flex: 1;\n// `\n\nconst TodoFooter = styled.div`\n  text-align: center;\n  justify-content: center;\n`\n\nconst InputButton = styled(Button)`\n  background-color: #ffffff;\n  margin-left: 12px;\n`\n\nconst StateButton = styled(Button)`\n  background-color: #ffccbc;\n${props => props.$isDone && `\n  background-color: #dcedc8;  \n`}\n`\n\nconst ReButton = styled(Button)`\n`\n\nconst DeleteAllButton = styled(Button)`\n  background-color: #e5ffff;\n  margin: 0;\n  margin-top: 40px;\n  width: 30%;\n`\n\n// 每一個代辦 Todo\nfunction Todo({ todo, handleDeleteTodo, handleToggleClick, handleEditTodo, handleOnblur }) {\n  const handleToggleIsDone = () => {\n    handleToggleClick(todo.id)\n  }\n\n  return (\n    <TodoContents data-todo-id={todo.id}>\n    \n      <TodoContent>\n        <TodoContentText $isDone={todo.isDone} >\n\n          <input defaultValue={todo.content} onChange={handleEditTodo}\n            onBlur={() => {\n              handleOnblur(todo.id)\n            }} />\n\n        </TodoContentText>\n\n        <StateButton $isDone={todo.isDone} onClick={handleToggleIsDone}>\n          {todo.isDone ? '已完成' : '未完成'}\n        </StateButton>\n        <ReButton onClick={() => {\n          handleDeleteTodo(todo.id)\n        }}>刪除</ReButton>\n      </TodoContent>\n\n    </TodoContents>\n  )\n}\n\n// let id = 2\nfunction TodoItem({ content }) {\n\n  // 建立 todo 的 state\n  const [todos, setTodos] = useState([\n    {\n      id: 1,\n      content: '第一則留言已完成',\n      isDone: true\n    },\n    {\n      id: 2,\n      content: '第二則留言未完成',\n      isDone: false\n    },\n    {\n      id: 3,\n      content: '第三則留言已完成',\n      isDone: true\n    }\n  ])\n\n  const [value, setValue] = useState('')  // 新增的時候，將輸入欄內的值控制住\n  const [filters, setFilter] = useState('All')\n  const [edit, setEdit] = useState('')  // 編輯的時候，將編輯籃內的值控制住\n  const id = useRef(4)\n\n  const FILTER_KEY = {\n    'All': todo => todo,\n    'UnDone': todo => todo.isDone === false,\n    'Done': todo => todo.isDone === true\n  }\n  \n  // 新增 1/2\n  const handleButtonClick = () => {\n    if (!value.trim()) return   // 防止空白 todo\n    setTodos([{\n      id: id.current,\n      content: value,\n      isDone: false\n    }, ...todos])\n    setValue('')\n    id.current++  // id++\n  }\n  // 新增 2/2\n  const handleInputChange = (e) => {\n    setValue(e.target.value)\n  }\n\n  // 修改狀態成 已完成\n  const handleToggleClick = id => {\n    setTodos(todos.map(todo => {\n      if (todo.id !== id) return todo\n      return {\n        ...todo,\n        isDone: !todo.isDone\n      }\n    }))\n  }\n\n  // 刪除單個\n  const handleDeleteTodo = id => {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  // 全部刪除\n  const handleDeleteAllTodo = () => {\n    setTodos([])\n    // setTodos([todos.filter(todo => todo.id === true)])\n  }\n\n  // 編輯 onBlur 1/2\n  const handleOnblur = id => {\n    if (!edit.trim()) return   // 防止空白 todo\n    setTodos(todos.map(todo => {\n    if (todo.id !== id) return todo\n      return {\n        ...todo,\n        content: edit\n        // id: id,\n        // content: edit,\n        // ...todo\n      }\n    }))\n    setEdit('')\n  } \n  // 編輯 onBlur 2/2\n  const handleEditTodo = e => {\n    setEdit(e.target.value)\n  }\n\n  const todoList = todos\n    .filter(FILTER_KEY[filters])\n    .map( todo => \n      <Todo\n        key={todo.id} \n        todo={todo} \n        handleDeleteTodo={handleDeleteTodo} \n        handleToggleClick={handleToggleClick} \n        handleEditTodo={handleEditTodo}\n        handleOnblur={handleOnblur}\n      />\n    )\n\n  const filterAll = () => {\n    console.log('現在的 todos ', todos)\n    console.log('現在的 edit ', edit)\n    setFilter('All')\n  }\n\n  const filterUnDone = () => {\n    setFilter('UnDone')\n  }\n\n  const filterDone = () => {\n    setFilter('Done')\n  }\n\n  return (\n    <TodoItemWrapper>\n      <TodoTitle>\n        Todo\n      </TodoTitle>\n\n      {/* Todo 輸入欄 */}\n      <TodoHeader>\n        {/* <TodoHeaderInput></TodoHeaderInput> */}\n        <input type=\"text\" placeholder=\"請輸入代辦事項\" value={value} onChange={handleInputChange} />\n        <InputButton onClick={handleButtonClick}>新增</InputButton>\n      </TodoHeader>\n\n      {/* 這裡分類分類 */}\n      <TodoFilter>\n        <FilterButton onClick={filterAll} >全部</FilterButton>\n        <FilterButton onClick={filterUnDone} >未完成</FilterButton>\n        <FilterButton onClick={filterDone} >已完成</FilterButton>\n      </TodoFilter>\n      {/* Todo */}\n      {todoList}\n      \n      {/* 全部刪除 */}\n      <TodoFooter>\n        <DeleteAllButton onClick={handleDeleteAllTodo} >全部刪除</DeleteAllButton>\n      </TodoFooter>\n    </TodoItemWrapper>\n  )\n}\n\nexport default TodoItem","// import './App.css';\n// import styled from 'styled-components'\n// import { MEDIA_QUERY_MD, MEDIA_QUERY_LG } from './constants/breakpoint'\nimport TodoItem from './TodoItem'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoItem />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components'\n\nconst theme = {\n  colors: {\n    primary_300: '#ff1744',\n    primary_400: '#ba6b6c',\n    primary_500: '#ff79ff',\n  }\n}\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />,\n  </ThemeProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}